// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model masyarakat {
  nik      String @id @db.Char(16)
  username String @unique @db.VarChar(25)
  password String @db.VarChar(100)
  nama     String @db.VarChar(35)
  telp     String @db.VarChar(13)

  pengaduan pengaduan[]
}

model pengaduan {
  id_pengaduan  Int      @id @default(autoincrement())
  tgl_pengaduan DateTime @db.Date
  nik           String   @db.Char(16)
  isi_laporan   String   @db.Text
  foto          String   @db.LongText
  status        Status

  masyarakat masyarakat  @relation(fields: [nik], references: [nik], onDelete: Cascade)
  tanggapan  tanggapan[]
}

enum Status {
  KOSONG  @map("0")
  PROSES  @map("proses")
  SELESAI @map("selesai")
}

model petugas {
  id_petugas   Int    @id @default(autoincrement())
  nama_petugas String @db.VarChar(35)
  username     String @unique @db.VarChar(25)
  password     String @db.VarChar(100)
  telp         String @db.VarChar(13)
  level        Role

  tanggapan tanggapan[]
}

enum Role {
  ADMIN   @map("admin")
  PETUGAS @map("petugas")
}

model tanggapan {
  id_tanggapan  Int      @id @default(autoincrement())
  id_pengaduan  Int
  tgl_tanggapan DateTime @db.Date
  tanggapan     String   @db.Text
  id_petugas    Int

  pengaduan pengaduan @relation(fields: [id_pengaduan], references: [id_pengaduan], onDelete: Cascade)
  petugas   petugas   @relation(fields: [id_petugas], references: [id_petugas], onDelete: Cascade)
}
